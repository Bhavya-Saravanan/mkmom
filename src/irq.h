/***********************************************************************
 * @file      irq.h
 * @version   1.0
 * @brief     Header file for IRQ (Interrupt Request) handling.
 *
 * @author    Bhavya Saravanan, bhsa3618@colorado.edu
 * @date      13-02-2025
 *
 * @institution University of Colorado Boulder (UCB)
 * @course      ECEN 5823: IoT Embedded Firmware
 * @instructor  Chris Choi
 *
 * @resources  Lecture slides
 *
 ***********************************************************************/
#ifndef IRQ_H_
#define IRQ_H_
#include <stdint.h>

/**
 * @brief Retrieves the current system time in milliseconds.
 *
 * This function returns the number of milliseconds since the program started.
 *
 * @param None
 * @return uint32_t - Current time in milliseconds.
 */
uint32_t letimerMilliseconds();

/**
 * @brief LETIMER0 Interrupt Handler.
 *
 * This function handles interrupts generated by the LETIMER0 peripheral.
 * It clears interrupt flags and schedules an event to process the interrupt.
 *
 * @param None
 * @return None
 */
void LETIMER0_IRQHandler(void);

/**
 * @brief Handles GPIO even-numbered interrupts (including PB0 button press).
 *
 * This interrupt service routine (ISR) is triggered when an even-numbered GPIO pin
 * generates an interrupt. It reads the interrupt flags, clears them, and checks if
 * the PB0 button was pressed or released. Based on the button state, it schedules
 * the appropriate event.
 *
 * @param None
 * @return None
 */
void GPIO_EVEN_IRQHandler(void);

/**
 * @brief Handles GPIO odd-numbered interrupts (including PB1 button press).
 *
 * This interrupt service routine (ISR) is triggered when an even-numbered GPIO pin
 * generates an interrupt. It reads the interrupt flags, clears them, and checks if
 * the PB1 button was pressed or released. Based on the button state, it schedules
 * the appropriate event.
 *
 * @param None
 * @return None
 */
void GPIO_ODD_IRQHandler(void);

#endif /* IRQ_H_ */


